{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n\nconst StoreGrid = () => {\n  _s();\n\n  const [image, setImage] = useState([]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/photos/\").then(response => response.json()).then(data => {\n      //   this map sets only the last image from the api call\n      data.map(photo => {\n        return setImage({\n          image: photo.thumbnailUrl,\n          id: photo.id\n        });\n      }); // these are different attempts. have them consoled out so as not to repeat attempts or just look at something to try again\n      // data.forEach((photo) => {\n      //   if (photo.albumId === 1) {\n      //     setImage(photo);\n      //   }\n      // });\n      // i chained this forEach onto a map of the original array with if photo.albumId === 1\n      //   .forEach((newPhotoArr) => {\n      //     newPhotoArr.forEach((photo) => {\n      //       //   setImage(photo.thumbnailUrl);\n      //       console.log(photo.thumbnailUrl);\n      //     });\n      //   });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image.image,\n      alt: image.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StoreGrid, \"hejv0f+LLDIHbanudkOUhG7Gr3g=\");\n\n_c = StoreGrid;\nexport default StoreGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreGrid\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js"],"names":["React","useState","useEffect","StoreGrid","image","setImage","fetch","then","response","json","data","map","photo","thumbnailUrl","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CAAC,8CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd;AACAA,MAAAA,IAAI,CAACC,GAAL,CAAUC,KAAD,IAAW;AAClB,eAAOP,QAAQ,CAAC;AAAED,UAAAA,KAAK,EAAEQ,KAAK,CAACC,YAAf;AAA6BC,UAAAA,EAAE,EAAEF,KAAK,CAACE;AAAvC,SAAD,CAAf;AACD,OAFD,EAFc,CAMd;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAtBH;AAuBD,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,sBACE;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEV,KAAK,CAACA,KAAhB;AAAuB,MAAA,GAAG,EAAEA,KAAK,CAACA;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlCD;;GAAMD,S;;KAAAA,S;AAoCN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst StoreGrid = () => {\n  const [image, setImage] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/photos/\")\n      .then((response) => response.json())\n      .then((data) => {\n        //   this map sets only the last image from the api call\n        data.map((photo) => {\n          return setImage({ image: photo.thumbnailUrl, id: photo.id });\n        });\n\n        // these are different attempts. have them consoled out so as not to repeat attempts or just look at something to try again\n        // data.forEach((photo) => {\n        //   if (photo.albumId === 1) {\n        //     setImage(photo);\n        //   }\n        // });\n\n        // i chained this forEach onto a map of the original array with if photo.albumId === 1\n        //   .forEach((newPhotoArr) => {\n        //     newPhotoArr.forEach((photo) => {\n        //       //   setImage(photo.thumbnailUrl);\n        //       console.log(photo.thumbnailUrl);\n        //     });\n        //   });\n      });\n  }, []);\n\n  return (\n    <div>\n      <img src={image.image} alt={image.image} />\n    </div>\n  );\n};\n\nexport default StoreGrid;\n"]},"metadata":{},"sourceType":"module"}