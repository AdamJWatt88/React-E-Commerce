{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n\nconst StoreGrid = () => {\n  _s();\n\n  // after this logic works i want to move it out into Redux store and import here as props\n  const [images, setImage] = useState([]);\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/photos/\").then(response => response.json()).then(data => {\n      //this correctly filters all photos with the albumId of 1 and sets to a new array named albumArr. i think i now need to map that albumArr and set it to images state\n      const albumArr = data.filter(album => album.albumId === 1);\n      setImage(albumArr.map(photo => {\n        return setImage({\n          image: photo.thumbnailUrl,\n          id: photo.id\n        });\n      })); // albumArr.map((photo) => {\n      //   return setImage({ image: photo.thumbnailUrl, id: photo.id });\n      // });\n      //   this map sets only the last image from the api call\n      // data.map((photo) =>\n      //   setImage({ image: photo.thumbnailUrl, id: photo.id })\n      // );\n    });\n  }, []);\n\n  const renderImages = () => {\n    /*#__PURE__*/\n    _jsxDEV(\"img\", {\n      src: images.image,\n      alt: images.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderImages()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(StoreGrid, \"1anmnu7NZSx+wAbegZkk1IJukQI=\");\n\n_c = StoreGrid;\nexport default StoreGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreGrid\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js"],"names":["React","useState","useEffect","StoreGrid","images","setImage","fetch","then","response","json","data","albumArr","filter","album","albumId","map","photo","image","thumbnailUrl","id","renderImages"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB;AACA,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqBJ,QAAQ,CAAC,EAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CAAC,8CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd;AAEA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,MAAL,CAAaC,KAAD,IAAWA,KAAK,CAACC,OAAN,KAAkB,CAAzC,CAAjB;AAEAT,MAAAA,QAAQ,CACNM,QAAQ,CAACI,GAAT,CAAcC,KAAD,IAAW;AACtB,eAAOX,QAAQ,CAAC;AAAEY,UAAAA,KAAK,EAAED,KAAK,CAACE,YAAf;AAA6BC,UAAAA,EAAE,EAAEH,KAAK,CAACG;AAAvC,SAAD,CAAf;AACD,OAFD,CADM,CAAR,CALc,CAWd;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KApBH;AAqBD,GAtBQ,EAsBN,EAtBM,CAAT;;AAuBA,QAAMC,YAAY,GAAG,MAAM;AACzB;AAAA;AAAK,MAAA,GAAG,EAAEhB,MAAM,CAACa,KAAjB;AAAwB,MAAA,GAAG,EAAEb,MAAM,CAACa;AAApC;AAAA;AAAA;AAAA;AAAA;AACD,GAFD;;AAIA,sBAAO;AAAA,cAAMG,YAAY;AAAlB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhCD;;GAAMjB,S;;KAAAA,S;AAkCN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst StoreGrid = () => {\n  // after this logic works i want to move it out into Redux store and import here as props\n  const [images, setImage] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/photos/\")\n      .then((response) => response.json())\n      .then((data) => {\n        //this correctly filters all photos with the albumId of 1 and sets to a new array named albumArr. i think i now need to map that albumArr and set it to images state\n\n        const albumArr = data.filter((album) => album.albumId === 1);\n\n        setImage(\n          albumArr.map((photo) => {\n            return setImage({ image: photo.thumbnailUrl, id: photo.id });\n          })\n        );\n\n        // albumArr.map((photo) => {\n        //   return setImage({ image: photo.thumbnailUrl, id: photo.id });\n        // });\n        //   this map sets only the last image from the api call\n        // data.map((photo) =>\n        //   setImage({ image: photo.thumbnailUrl, id: photo.id })\n        // );\n      });\n  }, []);\n  const renderImages = () => {\n    <img src={images.image} alt={images.image} />;\n  };\n\n  return <div>{renderImages()}</div>;\n};\n\nexport default StoreGrid;\n"]},"metadata":{},"sourceType":"module"}