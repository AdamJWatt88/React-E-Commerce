{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProducts } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/storeGrid.css\"; //? categories is the array from which the SlideMenu creates when a user makes their selections from the checkboxes. this array needs to be fed each time through the getCategory action creator\n//? category is supposed to be the piece of state in which the getCategory writes to which needs to be a combined array of the categories that have been selected\n\nconst StoreGrid = ({\n  getProducts,\n  products,\n  categories\n}) => {\n  _s();\n\n  // anytime categories state has been loaded by a user making selections from the checkbox, the getCategory fetch call will be made.\n  //? this might not be the correct approach as everytime the component is loaded the getProducts call is made and the getCategory seems to only be called after the user has submitted their choice twice.\n  useEffect(() => {\n    getProducts();\n  }, []);\n\n  const renderImages = () => {\n    if (categories) {\n      console.log(\"hey got some categories\");\n    }\n\n    return products.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-4 product\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.image,\n          alt: item.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"$\", item.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: renderImages()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StoreGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = StoreGrid;\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    categories: state.categories\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getProducts\n})(StoreGrid);\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreGrid\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js"],"names":["React","useEffect","connect","getProducts","css","StoreGrid","products","categories","renderImages","console","log","map","item","image","title","price","id","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,sBAAhB,C,CAEA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEF,EAAAA,WAAF;AAAeG,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAA2C;AAAA;;AAC3D;AACA;AACAN,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,YAAY,GAAG,MAAM;AACzB,QAAID,UAAJ,EAAgB;AACdE,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;;AAED,WAAOJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAU;AAC5B,0BACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACC,KAAf;AAAsB,UAAA,GAAG,EAAED,IAAI,CAACC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,0BAAMF,IAAI,CAACG,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,SAAwCH,IAAI,CAACI,EAA7C;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARM,CAAP;AASD,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBAAsBR,YAAY;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BD;;GAAMH,S;;KAAAA,S;;AA8BN,MAAMY,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLZ,IAAAA,QAAQ,EAAEY,KAAK,CAACZ,QADX;AAELC,IAAAA,UAAU,EAAEW,KAAK,CAACX;AAFb,GAAP;AAID,CALD;;AAOA,eAAeL,OAAO,CAACe,eAAD,EAAkB;AACtCd,EAAAA;AADsC,CAAlB,CAAP,CAEZE,SAFY,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProducts } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/storeGrid.css\";\n\n//? categories is the array from which the SlideMenu creates when a user makes their selections from the checkboxes. this array needs to be fed each time through the getCategory action creator\n//? category is supposed to be the piece of state in which the getCategory writes to which needs to be a combined array of the categories that have been selected\n\nconst StoreGrid = ({ getProducts, products, categories }) => {\n  // anytime categories state has been loaded by a user making selections from the checkbox, the getCategory fetch call will be made.\n  //? this might not be the correct approach as everytime the component is loaded the getProducts call is made and the getCategory seems to only be called after the user has submitted their choice twice.\n  useEffect(() => {\n    getProducts();\n  }, []);\n\n  const renderImages = () => {\n    if (categories) {\n      console.log(\"hey got some categories\");\n    }\n\n    return products.map((item) => {\n      return (\n        <div className='col col-4 product' key={item.id}>\n          <img src={item.image} alt={item.image} />\n          <h6>{item.title}</h6>\n          <h5>${item.price}</h5>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className='container'>\n      <div className='row'>{renderImages()}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    products: state.products,\n    categories: state.categories,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getProducts,\n})(StoreGrid);\n"]},"metadata":{},"sourceType":"module"}