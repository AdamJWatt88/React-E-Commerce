{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/SlideMenu.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\"; // eslint-disable-next-line\n\nimport css from \"../css/slideMenu.css\";\n\nconst SlideMenu = props => {\n  _s();\n\n  const [category, setCategory] = useState(\"\");\n  useEffect(() => {\n    // console.log(props);\n    console.log(category); // eslint-disable-next-line\n  }, []);\n  const productCategories = [{\n    category: \"Mens Clothing\"\n  }, {\n    category: \"Womens Clothing\"\n  }, {\n    category: \"Jewlery\"\n  }, {\n    category: \"Electronics\"\n  }];\n\n  const renderInput = () => {\n    return productCategories.map((category, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-check\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: category.category,\n          component: \"input\",\n          className: \"form-check-input\",\n          type: \"checkbox\",\n          format: v => v === \"1\" // converts redux state string to boolean\n          ,\n          normalize: v => v ? \"1\" : \"0\" // converts checkbox boolean to string\n          // value={category.category}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-check-label\",\n          htmlFor: \"flexCheckDefault\",\n          children: category.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    });\n  }; // this submit handler receives props from the Field element that passes props to the form element\n\n\n  const handleSubmit = formProps => {\n    setCategory(formProps); //maybe need to check if null then dont console log. if there is a value then console log.\n    //how can formProps be looped over to check if the value of a prop is \"1\" or true and extract that data?\n\n    if (formProps.Electronics === \"1\") {\n      console.log(\"this is one\");\n    } else {\n      console.log(formProps);\n    }\n  };\n\n  const toggleMenu = () => {\n    if (!props.openOrClosed) {\n      return \"slide-menu\";\n    } else {\n      return \"slide-menu open\";\n    }\n  };\n\n  const toggle = toggleMenu();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${toggle} container`,\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Filter By Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: props.handleSubmit(handleSubmit),\n      children: [renderInput(), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SlideMenu, \"2NG3TQBAwS4GiIq53+O3ei1zbT8=\");\n\n_c = SlideMenu;\n\nconst mapStateToProps = state => {\n  return {\n    openOrClosed: state.openOrClosed\n  };\n};\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst slideMenu = connect(mapStateToProps)(SlideMenu);\nexport default reduxForm({\n  form: \"slideMenu\",\n  validate: validate\n})(slideMenu);\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideMenu\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/SlideMenu.js"],"names":["React","useEffect","useState","connect","Field","reduxForm","css","SlideMenu","props","category","setCategory","console","log","productCategories","renderInput","map","index","v","handleSubmit","formProps","Electronics","toggleMenu","openOrClosed","toggle","mapStateToProps","state","validate","formValues","errors","title","description","slideMenu","form"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\n\n// eslint-disable-next-line\nimport css from \"../css/slideMenu.css\";\n\nconst SlideMenu = (props) => {\n  const [category, setCategory] = useState(\"\");\n\n  useEffect(() => {\n    // console.log(props);\n    console.log(category);\n    // eslint-disable-next-line\n  }, []);\n\n  const productCategories = [\n    {\n      category: \"Mens Clothing\",\n    },\n    {\n      category: \"Womens Clothing\",\n    },\n    {\n      category: \"Jewlery\",\n    },\n    {\n      category: \"Electronics\",\n    },\n  ];\n\n  const renderInput = () => {\n    return productCategories.map((category, index) => {\n      return (\n        <div className='form-check' key={index}>\n          <Field\n            name={category.category}\n            component='input'\n            className='form-check-input'\n            type='checkbox'\n            format={(v) => v === \"1\"}\n            // converts redux state string to boolean\n            normalize={(v) => (v ? \"1\" : \"0\")}\n            // converts checkbox boolean to string\n            // value={category.category}\n          />\n          <label className='form-check-label' htmlFor='flexCheckDefault'>\n            {category.category}\n          </label>\n        </div>\n      );\n    });\n  };\n\n  // this submit handler receives props from the Field element that passes props to the form element\n  const handleSubmit = (formProps) => {\n    setCategory(formProps);\n    //maybe need to check if null then dont console log. if there is a value then console log.\n    //how can formProps be looped over to check if the value of a prop is \"1\" or true and extract that data?\n    if (formProps.Electronics === \"1\") {\n      console.log(\"this is one\");\n    } else {\n      console.log(formProps);\n    }\n  };\n\n  const toggleMenu = () => {\n    if (!props.openOrClosed) {\n      return \"slide-menu\";\n    } else {\n      return \"slide-menu open\";\n    }\n  };\n\n  const toggle = toggleMenu();\n\n  return (\n    <div className={`${toggle} container`}>\n      <h5>Filter By Category</h5>\n      <form onSubmit={props.handleSubmit(handleSubmit)}>\n        {renderInput()}\n        <button className='btn btn-primary'>Apply Filter</button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    openOrClosed: state.openOrClosed,\n  };\n};\n\nconst validate = (formValues) => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst slideMenu = connect(mapStateToProps)(SlideMenu);\n\nexport default reduxForm({\n  form: \"slideMenu\",\n  validate: validate,\n})(slideMenu);\n"]},"metadata":{},"sourceType":"module"}