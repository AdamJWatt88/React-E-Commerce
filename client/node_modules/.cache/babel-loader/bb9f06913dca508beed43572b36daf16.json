{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/SlideMenu.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { categorySelection } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/slideMenu.css\";\n\nconst SlideMenu = ({\n  openOrClosed,\n  handleSubmit,\n  productCategories,\n  categorySelection\n}) => {\n  const renderInput = () => {\n    return productCategories.map((category, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-check\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: category.category,\n          component: \"input\",\n          className: \"form-check-input\",\n          type: \"checkbox\",\n          format: v => v === `${category.value}` // converts redux state string to boolean\n          ,\n          normalize: v => v ? `${category.value}` : \"0\" // converts checkbox boolean to string\n          // value={category.category}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-check-label\",\n          htmlFor: \"flexCheckDefault\",\n          children: category.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    });\n  }; // send the formProps object over to state where in the Object.values(formProps) turns the formProps object's values into an array\n\n\n  const submitHandler = formProps => {\n    categorySelection(formProps);\n  };\n\n  const toggleMenu = () => {\n    if (!openOrClosed) {\n      return \"slide-menu\";\n    } else {\n      return \"slide-menu open\";\n    }\n  };\n\n  const toggle = toggleMenu();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${toggle} container`,\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Filter By Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(submitHandler),\n      children: [renderInput(), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SlideMenu;\n\nconst mapStateToProps = state => {\n  return {\n    category: state.category,\n    categories: state.categories,\n    productCategories: state.productCategories,\n    openOrClosed: state.openOrClosed\n  };\n}; // this validate function is only boilerplate. the title and description values need to be changed to the name props of the checkboxes. make sure that atleast one checkbox is checked off before a user hits the submit button.\n\n\nconst validate = formProps => {\n  const errors = {};\n\n  if (!formProps.Electronics) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formProps.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst slideMenu = connect(mapStateToProps, {\n  categorySelection,\n  getCategory\n})(SlideMenu);\nexport default reduxForm({\n  form: \"slideMenu\",\n  validate: validate\n})(slideMenu);\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideMenu\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/SlideMenu.js"],"names":["React","connect","Field","reduxForm","categorySelection","css","SlideMenu","openOrClosed","handleSubmit","productCategories","renderInput","map","category","index","v","value","submitHandler","formProps","toggleMenu","toggle","mapStateToProps","state","categories","validate","errors","Electronics","title","description","slideMenu","getCategory","form"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { categorySelection } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/slideMenu.css\";\n\nconst SlideMenu = ({\n  openOrClosed,\n  handleSubmit,\n  productCategories,\n  categorySelection,\n}) => {\n  const renderInput = () => {\n    return productCategories.map((category, index) => {\n      return (\n        <div className='form-check' key={index}>\n          <Field\n            name={category.category}\n            component='input'\n            className='form-check-input'\n            type='checkbox'\n            format={(v) => v === `${category.value}`}\n            // converts redux state string to boolean\n            normalize={(v) => (v ? `${category.value}` : \"0\")}\n            // converts checkbox boolean to string\n            // value={category.category}\n          />\n          <label className='form-check-label' htmlFor='flexCheckDefault'>\n            {category.value}\n          </label>\n        </div>\n      );\n    });\n  };\n\n  // send the formProps object over to state where in the Object.values(formProps) turns the formProps object's values into an array\n  const submitHandler = (formProps) => {\n    categorySelection(formProps);\n  };\n\n  const toggleMenu = () => {\n    if (!openOrClosed) {\n      return \"slide-menu\";\n    } else {\n      return \"slide-menu open\";\n    }\n  };\n\n  const toggle = toggleMenu();\n\n  return (\n    <div className={`${toggle} container`}>\n      <h5>Filter By Category</h5>\n      <form onSubmit={handleSubmit(submitHandler)}>\n        {renderInput()}\n        <button className='btn btn-primary'>Apply Filter</button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    category: state.category,\n    categories: state.categories,\n    productCategories: state.productCategories,\n    openOrClosed: state.openOrClosed,\n  };\n};\n\n// this validate function is only boilerplate. the title and description values need to be changed to the name props of the checkboxes. make sure that atleast one checkbox is checked off before a user hits the submit button.\nconst validate = (formProps) => {\n  const errors = {};\n\n  if (!formProps.Electronics) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formProps.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst slideMenu = connect(mapStateToProps, {\n  categorySelection,\n  getCategory,\n})(SlideMenu);\n\nexport default reduxForm({\n  form: \"slideMenu\",\n  validate: validate,\n})(slideMenu);\n"]},"metadata":{},"sourceType":"module"}