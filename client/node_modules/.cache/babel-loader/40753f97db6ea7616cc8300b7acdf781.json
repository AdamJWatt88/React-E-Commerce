{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart, updateQuantity } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/shoppingCartCard.css\"; //Todo turn the onClick for the updateQuantity button into something that changes an element into an iput the user can interact with. Maybe do away with the button and the quantity display and add a select tag with quantitys as the options tags.\n\nconst ShoppingCartCard = props => {\n  _s();\n\n  const {\n    cartItems,\n    removeProductFromCart,\n    updateQuantity\n  } = props;\n  const [quantity, setQuantity] = useState(\"\"); //! wont need this if i get the select working\n\n  const [input, setInput] = useState(false); // this creates an array of all the refs and stores them to an array for each item in cartItems\n\n  const refs = Array.from(cartItems, () => /*#__PURE__*/createRef(null)); // this handler loops through the refs and checks that they match the delete button's data-key and removes the item from the dom and cartItems\n\n  const deleteFromCart = e => {\n    refs.forEach(ref => {\n      if (ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        removeProductFromCart(ref.current.getAttribute(\"value\"));\n      }\n    });\n  }; //! needs to update quantity after a user gives some input\n  //? this is the onSubmit function for form after a user has given some input for quantity change\n  //? think i need to split out this logic. the upper portion that is doing the check in the if should trigger to allow for a single item to change its input\n\n\n  const updateCart = e => {\n    e.preventDefault(); // refs.forEach((ref) => {\n    //   if (\n    //     //! this might not match to anything unless i use data-key on the select options\n    //     ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n    //   ) {\n    //     updateQuantity({\n    //       id: +ref.current.getAttribute(\"value\"),\n    //       quantity: quantity,\n    //     });\n    //   }\n    // });\n    // //! delete this changeQuantityField out of here if the select with options works\n    // // changeQuantityField();\n    // console.log(quantity);\n  }; //toggles between an input field and a p element in renderedItems\n  //! wont need this if i get the select working\n\n\n  const changeQuantityField = () => {\n    setInput(!input);\n  }; //! save this function incase the select and options method doesnt work out\n  // const renderInput = () => {\n  //   return (\n  //     <form onSubmit={updateCart}>\n  //       <input type='number' value={quantity} onChange={onChange} />\n  //     </form>\n  //   );\n  // };\n\n\n  const renderOptions = cartItemQuantity => {\n    const options = []; // const selectedValue = options.push(\n    //   <option selected value={cartItemQuantity}>\n    //     Quantity: {cartItemQuantity}\n    //   </option>\n    // );\n\n    for (let i = 1; i <= 20; i++) {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        \"data-key\": i,\n        value: i,\n        children: [\"Quantity: \", i]\n      }, [i], true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this));\n    }\n\n    return options;\n  }; //? its under this function that i need to isolate the div that i want to change the input\n  //! save this function incase the select and options method doesnt work out\n\n\n  const testFunction = e => {\n    refs.forEach(ref => {\n      if (ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        changeQuantityField(); // renderInput();\n      }\n    });\n  };\n\n  const onChange = e => {\n    setQuantity(e.target.value);\n    refs.forEach(ref => {\n      if ( //! this might not match to anything unless i use data-key on the select options\n      ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        console.log(e.target.getAttribute(\"data-key\"));\n        updateQuantity({\n          id: +ref.current.getAttribute(\"value\"),\n          quantity: quantity\n        });\n      }\n    }); //! delete this changeQuantityField out of here if the select with options works\n    // changeQuantityField();\n  };\n\n  const renderItems = () => {\n    return cartItems.map((cartItem, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: refs[i],\n        value: cartItem.id,\n        className: \"cart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: cartItem.image,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: cartItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cartItem.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: updateCart,\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: () => onChange(e),\n              defaultValue: cartItem.quantity,\n              name: \"Quantity\",\n              children: renderOptions(cartItem.quantity)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: deleteFromCart,\n              \"data-key\": cartItem.id,\n              className: \"btn btn-danger\",\n              children: \"Delete From Cart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, cartItem.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: renderItems()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ShoppingCartCard, \"fAAqmDUKmHeM/6gnuS6Bz5nhhvk=\");\n\n_c = ShoppingCartCard;\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.cartItems\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeProductFromCart,\n  updateQuantity\n})(ShoppingCartCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShoppingCartCard\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js"],"names":["React","createRef","useState","connect","removeProductFromCart","updateQuantity","css","ShoppingCartCard","props","cartItems","quantity","setQuantity","input","setInput","refs","Array","from","deleteFromCart","e","forEach","ref","current","getAttribute","target","updateCart","preventDefault","changeQuantityField","renderOptions","cartItemQuantity","options","i","push","testFunction","onChange","value","console","log","id","renderItems","map","cartItem","image","title","price","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { createRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart, updateQuantity } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/shoppingCartCard.css\";\n\n//Todo turn the onClick for the updateQuantity button into something that changes an element into an iput the user can interact with. Maybe do away with the button and the quantity display and add a select tag with quantitys as the options tags.\nconst ShoppingCartCard = (props) => {\n  const { cartItems, removeProductFromCart, updateQuantity } = props;\n  const [quantity, setQuantity] = useState(\"\");\n\n  //! wont need this if i get the select working\n  const [input, setInput] = useState(false);\n\n  // this creates an array of all the refs and stores them to an array for each item in cartItems\n  const refs = Array.from(cartItems, () => createRef(null));\n\n  // this handler loops through the refs and checks that they match the delete button's data-key and removes the item from the dom and cartItems\n  const deleteFromCart = (e) => {\n    refs.forEach((ref) => {\n      if (\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        removeProductFromCart(ref.current.getAttribute(\"value\"));\n      }\n    });\n  };\n\n  //! needs to update quantity after a user gives some input\n  //? this is the onSubmit function for form after a user has given some input for quantity change\n  //? think i need to split out this logic. the upper portion that is doing the check in the if should trigger to allow for a single item to change its input\n  const updateCart = (e) => {\n    e.preventDefault();\n    // refs.forEach((ref) => {\n    //   if (\n    //     //! this might not match to anything unless i use data-key on the select options\n    //     ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n    //   ) {\n    //     updateQuantity({\n    //       id: +ref.current.getAttribute(\"value\"),\n    //       quantity: quantity,\n    //     });\n    //   }\n    // });\n    // //! delete this changeQuantityField out of here if the select with options works\n    // // changeQuantityField();\n    // console.log(quantity);\n  };\n\n  //toggles between an input field and a p element in renderedItems\n  //! wont need this if i get the select working\n  const changeQuantityField = () => {\n    setInput(!input);\n  };\n\n  //! save this function incase the select and options method doesnt work out\n  // const renderInput = () => {\n  //   return (\n  //     <form onSubmit={updateCart}>\n  //       <input type='number' value={quantity} onChange={onChange} />\n  //     </form>\n  //   );\n  // };\n\n  const renderOptions = (cartItemQuantity) => {\n    const options = [];\n    // const selectedValue = options.push(\n    //   <option selected value={cartItemQuantity}>\n    //     Quantity: {cartItemQuantity}\n    //   </option>\n    // );\n\n    for (let i = 1; i <= 20; i++) {\n      options.push(\n        <option data-key={i} value={i} key={[i]}>\n          Quantity: {i}\n        </option>\n      );\n    }\n    return options;\n  };\n\n  //? its under this function that i need to isolate the div that i want to change the input\n  //! save this function incase the select and options method doesnt work out\n  const testFunction = (e) => {\n    refs.forEach((ref) => {\n      if (\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        changeQuantityField();\n        // renderInput();\n      }\n    });\n  };\n\n  const onChange = (e) => {\n    setQuantity(e.target.value);\n    refs.forEach((ref) => {\n      if (\n        //! this might not match to anything unless i use data-key on the select options\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        console.log(e.target.getAttribute(\"data-key\"));\n        updateQuantity({\n          id: +ref.current.getAttribute(\"value\"),\n          quantity: quantity,\n        });\n      }\n    });\n    //! delete this changeQuantityField out of here if the select with options works\n    // changeQuantityField();\n  };\n\n  const renderItems = () => {\n    return cartItems.map((cartItem, i) => {\n      return (\n        <div\n          ref={refs[i]}\n          key={cartItem.id}\n          value={cartItem.id}\n          className='cart-card'>\n          <div className='cart-card-img'>\n            <img src={cartItem.image} alt='' />\n          </div>\n          <div className='cart-card-body'>\n            <h5>{cartItem.title}</h5>\n            <p>${cartItem.price}</p>\n            {/* //* keep this p to input stuff incase the select with options does not work out\n             */}\n            {/* {input ? (\n              <form onSubmit={updateCart}>\n                <input type='number' value={quantity} onChange={onChange} />\n              </form>\n            ) : (\n              <p>Quantity: {cartItem.quantity}</p>\n            )} */}\n            {/* {input ? renderInput() : <p>Quantity: {cartItem.quantity}</p>} */}\n            {/* //? trying out a select with options for quantity instead */}\n            <form onSubmit={updateCart}>\n              <select\n                onChange={() => onChange(e)}\n                defaultValue={cartItem.quantity}\n                name='Quantity'>\n                {renderOptions(cartItem.quantity)}\n              </select>\n            </form>\n            <div className='button-group'>\n              {/* <button\n                onClick={testFunction}\n                data-key={cartItem.id}\n                className='btn btn-primary'>\n                Update Quantity\n              </button> */}\n              <button\n                onClick={deleteFromCart}\n                data-key={cartItem.id}\n                className='btn btn-danger'>\n                Delete From Cart\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return <div className='container'>{renderItems()}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cartItems: state.cartItems,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeProductFromCart,\n  updateQuantity,\n})(ShoppingCartCard);\n"]},"metadata":{},"sourceType":"module"}