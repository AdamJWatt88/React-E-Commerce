{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js\",\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRef } from \"react\";\nimport { connect } from \"react-redux\"; // eslint-disable-next-line\n\nimport css from \"../css/shoppingCartCard.css\";\n\nconst ShoppingCartCard = ({\n  cartItems\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //! this might be only creating one ref and attaching that same ref to all the cards. all those refs though only refer to the same element which is the last item in the nodeList of cards.\n  //? solution to this problem might be to create an array of refs and apply those refs to the array of cards being created\n  const ref = useRef([]);\n\n  const onClick = () => {\n    console.log(Array.from(cartItems.length));\n  };\n\n  function PIN({\n    length,\n    onChange,\n    value\n  }) {\n    _s();\n\n    const inputRefs = useMemo(() => Array(length).fill(0).map(i => /*#__PURE__*/React.createRef()), []);\n\n    const handleChange = index => e => {\n      //onChange(e); // don't know about the logic of this onChange if you have multiple inputs\n      if (inputRefs[index + 1]) inputRefs[index + 1].current.focus();\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: new Array(length).fill(0).map((inp, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRefs[index],\n        onChange: handleChange(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s(PIN, \"jgiaWSGKEUbW2toOX+CJKqkt/aU=\");\n\n  const handleClick = () => {\n    // console.log(ref.current.getAttribute(\"value\"));\n    console.log(ref.current);\n  };\n\n  const renderItems = () => {\n    return cartItems.map(cartItem => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: handleClick,\n        ref: ref => {\n          ref.current.push(ref);\n        },\n        value: cartItem.id,\n        className: \"cart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: cartItem.image,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: cartItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cartItem.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Quantity: \", cartItem.quantity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              children: \"Update Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onClick,\n              className: \"btn btn-danger\",\n              children: \"Delete From Cart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, cartItem.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: renderItems()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(ShoppingCartCard, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\n_c = ShoppingCartCard;\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.cartItems\n  };\n};\n\nexport default connect(mapStateToProps)(ShoppingCartCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShoppingCartCard\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js"],"names":["React","useRef","connect","css","ShoppingCartCard","cartItems","ref","onClick","console","log","Array","from","length","PIN","onChange","value","inputRefs","useMemo","fill","map","i","createRef","handleChange","index","e","current","focus","inp","handleClick","renderItems","cartItem","push","id","image","title","price","quantity","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useRef } from \"react\";\nimport { connect } from \"react-redux\";\n\n// eslint-disable-next-line\nimport css from \"../css/shoppingCartCard.css\";\n\nconst ShoppingCartCard = ({ cartItems }) => {\n  //! this might be only creating one ref and attaching that same ref to all the cards. all those refs though only refer to the same element which is the last item in the nodeList of cards.\n  //? solution to this problem might be to create an array of refs and apply those refs to the array of cards being created\n  const ref = useRef([]);\n\n  const onClick = () => {\n    console.log(Array.from(cartItems.length));\n  };\n\n  function PIN({ length, onChange, value }) {\n    const inputRefs = useMemo(\n      () =>\n        Array(length)\n          .fill(0)\n          .map((i) => React.createRef()),\n      []\n    );\n    const handleChange = (index) => (e) => {\n      //onChange(e); // don't know about the logic of this onChange if you have multiple inputs\n      if (inputRefs[index + 1]) inputRefs[index + 1].current.focus();\n    };\n    return (\n      <div>\n        {new Array(length).fill(0).map((inp, index) => (\n          <input\n            type='text'\n            ref={inputRefs[index]}\n            onChange={handleChange(index)}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  const handleClick = () => {\n    // console.log(ref.current.getAttribute(\"value\"));\n    console.log(ref.current);\n  };\n\n  const renderItems = () => {\n    return cartItems.map((cartItem) => {\n      return (\n        <div\n          onClick={handleClick}\n          ref={(ref) => {\n            ref.current.push(ref);\n          }}\n          key={cartItem.id}\n          value={cartItem.id}\n          className='cart-card'>\n          <div className='cart-card-img'>\n            <img src={cartItem.image} alt='' />\n          </div>\n          <div className='cart-card-body'>\n            <h5>{cartItem.title}</h5>\n            <p>${cartItem.price}</p>\n            <p>Quantity: {cartItem.quantity}</p>\n            <div className='button-group'>\n              <button className='btn btn-primary'>Update Quantity</button>\n              <button onClick={onClick} className='btn btn-danger'>\n                Delete From Cart\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return <div className='container'>{renderItems()}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cartItems: state.cartItems,\n  };\n};\n\nexport default connect(mapStateToProps)(ShoppingCartCard);\n"]},"metadata":{},"sourceType":"module"}