{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { createRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart, updateQuantity } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/shoppingCartCard.css\"; //Todo turn the onClick for the updateQuantity button into something that changes an element into an iput the user can interact with. Maybe do away with the button and the quantity display and add a select tag with quantitys as the options tags.\n\nconst ShoppingCartCard = ({\n  cartItems,\n  removeProductFromCart,\n  updateQuantity\n}) => {\n  _s();\n\n  const [quantity, setQuantity] = useState(\"\");\n  const [input, setInput] = useState(false); //! need to get a value from some user input into the setQuantity here\n  // useEffect(() => {\n  //   setQuantity(3);\n  // }, [quantity]);\n  // this creates an array of all the refs and stores them to an array for each item in cartItems\n\n  const refs = Array.from(cartItems, () => /*#__PURE__*/createRef(null)); // this handler loops through the refs and checks that they match the delete button's data-key and removes the item from the dom and cartItems\n\n  const deleteFromCart = e => {\n    refs.forEach(ref => {\n      if (ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        removeProductFromCart(ref.current.getAttribute(\"value\"));\n      }\n    });\n  }; //! needs to update quantity after a user gives some input\n  //* have it wired up to update the quantity using component level state under a useEffect update\n  //? commented out to work on updating this to change the p element to an input field\n\n\n  const updateCart = e => {\n    e.preventDefault();\n    refs.forEach(ref => {\n      if (ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        updateQuantity({\n          id: +ref.current.getAttribute(\"value\"),\n          quantity: quantity\n        });\n      }\n    });\n  }; //toggles between an input field and a p element in renderedItems\n\n\n  const changeQuantityField = () => {\n    setInput(!input);\n  };\n\n  const onChange = e => setQuantity(e.target.value);\n\n  const renderItems = () => {\n    return cartItems.map((cartItem, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: refs[i],\n        value: cartItem.id,\n        className: \"cart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: cartItem.image,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: cartItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cartItem.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), input ? /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: updateCart,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: quantity,\n              onChange: onChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Quantity: \", cartItem.quantity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: changeQuantityField,\n              \"data-key\": cartItem.id,\n              className: \"btn btn-primary\",\n              children: \"Update Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: deleteFromCart,\n              \"data-key\": cartItem.id,\n              className: \"btn btn-danger\",\n              children: \"Delete From Cart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, cartItem.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: renderItems()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ShoppingCartCard, \"fAAqmDUKmHeM/6gnuS6Bz5nhhvk=\");\n\n_c = ShoppingCartCard;\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.cartItems\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeProductFromCart,\n  updateQuantity\n})(ShoppingCartCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShoppingCartCard\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js"],"names":["React","createRef","useState","useEffect","connect","removeProductFromCart","updateQuantity","css","ShoppingCartCard","cartItems","quantity","setQuantity","input","setInput","refs","Array","from","deleteFromCart","e","forEach","ref","current","getAttribute","target","updateCart","preventDefault","id","changeQuantityField","onChange","value","renderItems","map","cartItem","i","image","title","price","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart, updateQuantity } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/shoppingCartCard.css\";\n\n//Todo turn the onClick for the updateQuantity button into something that changes an element into an iput the user can interact with. Maybe do away with the button and the quantity display and add a select tag with quantitys as the options tags.\nconst ShoppingCartCard = ({\n  cartItems,\n  removeProductFromCart,\n  updateQuantity,\n}) => {\n  const [quantity, setQuantity] = useState(\"\");\n  const [input, setInput] = useState(false);\n  //! need to get a value from some user input into the setQuantity here\n  // useEffect(() => {\n  //   setQuantity(3);\n  // }, [quantity]);\n\n  // this creates an array of all the refs and stores them to an array for each item in cartItems\n  const refs = Array.from(cartItems, () => createRef(null));\n\n  // this handler loops through the refs and checks that they match the delete button's data-key and removes the item from the dom and cartItems\n  const deleteFromCart = (e) => {\n    refs.forEach((ref) => {\n      if (\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        removeProductFromCart(ref.current.getAttribute(\"value\"));\n      }\n    });\n  };\n\n  //! needs to update quantity after a user gives some input\n  //* have it wired up to update the quantity using component level state under a useEffect update\n  //? commented out to work on updating this to change the p element to an input field\n  const updateCart = (e) => {\n    e.preventDefault();\n    refs.forEach((ref) => {\n      if (\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        updateQuantity({\n          id: +ref.current.getAttribute(\"value\"),\n          quantity: quantity,\n        });\n      }\n    });\n  };\n\n  //toggles between an input field and a p element in renderedItems\n  const changeQuantityField = () => {\n    setInput(!input);\n  };\n\n  const onChange = (e) => setQuantity(e.target.value);\n\n  const renderItems = () => {\n    return cartItems.map((cartItem, i) => {\n      return (\n        <div\n          ref={refs[i]}\n          key={cartItem.id}\n          value={cartItem.id}\n          className='cart-card'>\n          <div className='cart-card-img'>\n            <img src={cartItem.image} alt='' />\n          </div>\n          <div className='cart-card-body'>\n            <h5>{cartItem.title}</h5>\n            <p>${cartItem.price}</p>\n            {/* //Todo create a controlled input with the value being set by an onChange event then finally after it is submit call the updateCart \n              //Todo after the input is submit change back to the p element\n            */}\n            {input ? (\n              <form onSubmit={updateCart}>\n                <input type='number' value={quantity} onChange={onChange} />\n              </form>\n            ) : (\n              <p>Quantity: {cartItem.quantity}</p>\n            )}\n            <div className='button-group'>\n              <button\n                onClick={changeQuantityField}\n                data-key={cartItem.id}\n                className='btn btn-primary'>\n                Update Quantity\n              </button>\n              <button\n                onClick={deleteFromCart}\n                data-key={cartItem.id}\n                className='btn btn-danger'>\n                Delete From Cart\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return <div className='container'>{renderItems()}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cartItems: state.cartItems,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeProductFromCart,\n  updateQuantity,\n})(ShoppingCartCard);\n"]},"metadata":{},"sourceType":"module"}