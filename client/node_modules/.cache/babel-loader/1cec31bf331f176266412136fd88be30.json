{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProducts } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/storeGrid.css\"; //? ditching the getCategories api calls to sort out by category. just going to instead match the categories to the products.category state and render out that way.\n//? maybe make a helper function that renders all products that are filtered and keep the default renderImages helper function. I can maybe place these two function into a ternary that will render sortedProducts if categories is true and render renderImages if false.\n//? the sortedProducts helper function seems to sort the products correctly. now just need to conditionaly render products with the two helper functions\n\nconst StoreGrid = ({\n  getProducts,\n  products,\n  categories\n}) => {\n  _s();\n\n  // anytime categories state has been loaded by a user making selections from the checkbox, the getCategory fetch call will be made.\n  useEffect(() => {\n    getProducts(); // eslint-disable-next-line\n  }, [categories]); //* creating a function here that will take the products, match them to categories, then render out those sorted products\n\n  const sortedProducts = () => {\n    //* this seems to filter products correctly by the correctly chosen categories\n    const sortedProducts = products.filter(item => categories.includes(item.category));\n    console.log(sortedProducts);\n    return sortedProducts.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-4 product\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.image,\n          alt: item.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"$\", item.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this);\n    });\n  }; // const renderImages = () => {\n  //   if (categories) {\n  //     return sortedProducts();\n  //   } else {\n  //     return products.map((item) => {\n  //       return (\n  //         <div className='col col-4 product' key={item.id}>\n  //           <img src={item.image} alt={item.image} />\n  //           <h6>{item.title}</h6>\n  //           <h5>${item.price}</h5>\n  //         </div>\n  //       );\n  //     });\n  //   }\n  // };\n\n\n  const renderImages = () => {\n    if (categories) {\n      return products.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col col-4 product\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.image,\n            alt: item.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"$\", item.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this);\n      });\n    } else {\n      return sortedProducts();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: renderImages()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StoreGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = StoreGrid;\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    categories: state.categories\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getProducts\n})(StoreGrid);\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreGrid\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js"],"names":["React","useEffect","connect","getProducts","css","StoreGrid","products","categories","sortedProducts","filter","item","includes","category","console","log","map","image","title","price","id","renderImages","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,sBAAhB,C,CAEA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEF,EAAAA,WAAF;AAAeG,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAA2C;AAAA;;AAC3D;AACAN,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,WAAW,GADG,CAGd;AACD,GAJQ,EAIN,CAACI,UAAD,CAJM,CAAT,CAF2D,CAQ3D;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3B;AACA,UAAMA,cAAc,GAAGF,QAAQ,CAACG,MAAT,CAAiBC,IAAD,IACrCH,UAAU,CAACI,QAAX,CAAoBD,IAAI,CAACE,QAAzB,CADqB,CAAvB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AACA,WAAOA,cAAc,CAACO,GAAf,CAAoBL,IAAD,IAAU;AAClC,0BACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACM,KAAf;AAAsB,UAAA,GAAG,EAAEN,IAAI,CAACM;AAAhC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAKN,IAAI,CAACO;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,0BAAMP,IAAI,CAACQ,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,SAAwCR,IAAI,CAACS,EAA7C;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARM,CAAP;AASD,GAfD,CAV2D,CA2B3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAIb,UAAJ,EAAgB;AACd,aAAOD,QAAQ,CAACS,GAAT,CAAcL,IAAD,IAAU;AAC5B,4BACE;AAAK,UAAA,SAAS,EAAC,mBAAf;AAAA,kCACE;AAAK,YAAA,GAAG,EAAEA,IAAI,CAACM,KAAf;AAAsB,YAAA,GAAG,EAAEN,IAAI,CAACM;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKN,IAAI,CAACO;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,4BAAMP,IAAI,CAACQ,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAAwCR,IAAI,CAACS,EAA7C;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD,OARM,CAAP;AASD,KAVD,MAUO;AACL,aAAOX,cAAc,EAArB;AACD;AACF,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBAAsBY,YAAY;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhED;;GAAMf,S;;KAAAA,S;;AAkEN,MAAMgB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLhB,IAAAA,QAAQ,EAAEgB,KAAK,CAAChB,QADX;AAELC,IAAAA,UAAU,EAAEe,KAAK,CAACf;AAFb,GAAP;AAID,CALD;;AAOA,eAAeL,OAAO,CAACmB,eAAD,EAAkB;AACtClB,EAAAA;AADsC,CAAlB,CAAP,CAEZE,SAFY,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProducts } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/storeGrid.css\";\n\n//? ditching the getCategories api calls to sort out by category. just going to instead match the categories to the products.category state and render out that way.\n//? maybe make a helper function that renders all products that are filtered and keep the default renderImages helper function. I can maybe place these two function into a ternary that will render sortedProducts if categories is true and render renderImages if false.\n//? the sortedProducts helper function seems to sort the products correctly. now just need to conditionaly render products with the two helper functions\n\nconst StoreGrid = ({ getProducts, products, categories }) => {\n  // anytime categories state has been loaded by a user making selections from the checkbox, the getCategory fetch call will be made.\n  useEffect(() => {\n    getProducts();\n\n    // eslint-disable-next-line\n  }, [categories]);\n\n  //* creating a function here that will take the products, match them to categories, then render out those sorted products\n\n  const sortedProducts = () => {\n    //* this seems to filter products correctly by the correctly chosen categories\n    const sortedProducts = products.filter((item) =>\n      categories.includes(item.category)\n    );\n    console.log(sortedProducts);\n    return sortedProducts.map((item) => {\n      return (\n        <div className='col col-4 product' key={item.id}>\n          <img src={item.image} alt={item.image} />\n          <h6>{item.title}</h6>\n          <h5>${item.price}</h5>\n        </div>\n      );\n    });\n  };\n\n  // const renderImages = () => {\n  //   if (categories) {\n  //     return sortedProducts();\n  //   } else {\n  //     return products.map((item) => {\n  //       return (\n  //         <div className='col col-4 product' key={item.id}>\n  //           <img src={item.image} alt={item.image} />\n  //           <h6>{item.title}</h6>\n  //           <h5>${item.price}</h5>\n  //         </div>\n  //       );\n  //     });\n  //   }\n  // };\n\n  const renderImages = () => {\n    if (categories) {\n      return products.map((item) => {\n        return (\n          <div className='col col-4 product' key={item.id}>\n            <img src={item.image} alt={item.image} />\n            <h6>{item.title}</h6>\n            <h5>${item.price}</h5>\n          </div>\n        );\n      });\n    } else {\n      return sortedProducts();\n    }\n  };\n\n  return (\n    <div className='container'>\n      <div className='row'>{renderImages()}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    products: state.products,\n    categories: state.categories,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getProducts,\n})(StoreGrid);\n"]},"metadata":{},"sourceType":"module"}