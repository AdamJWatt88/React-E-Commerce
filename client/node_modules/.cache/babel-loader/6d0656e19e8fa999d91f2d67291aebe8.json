{"ast":null,"code":"import { FETCH_PRODUCTS, FETCH_CATEGORY, SET_SLIDE_MENU, CATEGORY_SELECTIONS } from \"../types\"; //get all products\n\nexport const getProducts = () => {\n  return async dispatch => {\n    const response = await fetch(\"https://fakestoreapi.com/products\");\n    const data = await response.json();\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: data\n    });\n  };\n}; // fetch products by category\n\nexport const getCategory = category => {\n  return async dispatch => {\n    const response = await fetch(`https://fakestoreapi.com/products/category/${category}`);\n    const data = await response.json();\n    dispatch({\n      type: FETCH_CATEGORY,\n      payload: data\n    });\n  };\n}; // this is the endpoint to hit for categories\n// fetch('https://fakestoreapi.com/products/category/jewelery')\n//             .then(res=>res.json())\n//             .then(json=>console.log(json))\n//map over the formProps obejct being passed in here then assign each category to the payload value\n\nexport const categorySelection = formProps => {\n  // return {\n  //   type: CATEGORY_SELECTIONS,\n  //   payload: formProps,\n  // };\n  // this might be the solution. This takes all the values from the formProps object and puts them into an array that can be mapped over for the category fetch action creator to iterate over\n  return {\n    type: CATEGORY_SELECTIONS,\n    payload: Object.values(formProps)\n  };\n}; //open and close the slideMenu if true or false\n\nexport const showSlideMenu = () => {\n  return {\n    type: SET_SLIDE_MENU\n  };\n};","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/actions/index.js"],"names":["FETCH_PRODUCTS","FETCH_CATEGORY","SET_SLIDE_MENU","CATEGORY_SELECTIONS","getProducts","dispatch","response","fetch","data","json","type","payload","getCategory","category","categorySelection","formProps","Object","values","showSlideMenu"],"mappings":"AAAA,SACEA,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,mBAJF,QAKO,UALP,C,CAOA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,cADC;AAEPW,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GARD;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMI,WAAW,GAAIC,QAAD,IAAc;AACvC,SAAO,MAAOR,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,8CAA6CM,QAAS,EAD7B,CAA5B;AAGA,UAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET,cADC;AAEPU,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAVD;AAWD,CAZM,C,CAcP;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMM,iBAAiB,GAAIC,SAAD,IAAe;AAC9C;AACA;AACA;AACA;AAEA;AACA,SAAO;AACLL,IAAAA,IAAI,EAAEP,mBADD;AAELQ,IAAAA,OAAO,EAAEK,MAAM,CAACC,MAAP,CAAcF,SAAd;AAFJ,GAAP;AAID,CAXM,C,CAaP;;AACA,OAAO,MAAMG,aAAa,GAAG,MAAM;AACjC,SAAO;AACLR,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  FETCH_PRODUCTS,\n  FETCH_CATEGORY,\n  SET_SLIDE_MENU,\n  CATEGORY_SELECTIONS,\n} from \"../types\";\n\n//get all products\nexport const getProducts = () => {\n  return async (dispatch) => {\n    const response = await fetch(\"https://fakestoreapi.com/products\");\n    const data = await response.json();\n\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: data,\n    });\n  };\n};\n\n// fetch products by category\nexport const getCategory = (category) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      `https://fakestoreapi.com/products/category/${category}`\n    );\n    const data = await response.json();\n\n    dispatch({\n      type: FETCH_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n// this is the endpoint to hit for categories\n// fetch('https://fakestoreapi.com/products/category/jewelery')\n//             .then(res=>res.json())\n//             .then(json=>console.log(json))\n\n//map over the formProps obejct being passed in here then assign each category to the payload value\nexport const categorySelection = (formProps) => {\n  // return {\n  //   type: CATEGORY_SELECTIONS,\n  //   payload: formProps,\n  // };\n\n  // this might be the solution. This takes all the values from the formProps object and puts them into an array that can be mapped over for the category fetch action creator to iterate over\n  return {\n    type: CATEGORY_SELECTIONS,\n    payload: Object.values(formProps),\n  };\n};\n\n//open and close the slideMenu if true or false\nexport const showSlideMenu = () => {\n  return {\n    type: SET_SLIDE_MENU,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}