{"ast":null,"code":"export const getThumbNails = () => {\n  return async dispatch => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/photos/\");\n    const data = await response.json();\n    const albumArr = await data.filter(album => album.albumId === 1).map(photo => {\n      return {\n        image: photo.thumbnailUrl,\n        id: photo.id\n      };\n    }); //   this filters out the albumId of 1, maps over them and sets the state to an array of the thumbnailUrl and id\n    //   const albumArr = await data\n    //     .filter((album) => album.albumId === 1)\n    //     .map((photo) => {\n    //       return { image: photo.thumbnailUrl, id: photo.id };\n    //     });\n\n    dispatch({\n      type: \"FETCH_THUMBNAILS\",\n      payload: albumArr\n    });\n  };\n}; // rewrite this code to an action creator that sends out a payload that is exact to images\n// the StoreGrid component will recieve the payload then do the rendering\n// rewrite the fetch as an async/await function\n// const [images, setImage] = useState([]);\n// useEffect(() => {\n//   fetch(\"https://jsonplaceholder.typicode.com/photos/\")\n//     .then((response) => response.json())\n//     .then((data) => {\n// this filters out the albumId of 1, maps over them and sets the state to an array of the thumbnailUrl and id\n//       const albumArr = data\n//         .filter((album) => album.albumId === 1)\n//         .map((photo) => {\n//           return { image: photo.thumbnailUrl, id: photo.id };\n//         });\n//       setImage(albumArr);\n//     });\n// }, []);\n// const renderImages = () => {\n//   return images.map((photo) => {\n//     return <img src={photo.image} alt='' />;\n//   });\n// };","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/actions/index.js"],"names":["getThumbNails","dispatch","response","fetch","data","json","albumArr","filter","album","albumId","map","photo","image","thumbnailUrl","id","type","payload"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8CAD0B,CAA5B;AAGA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,UAAMC,QAAQ,GAAG,MAAMF,IAAI,CACxBG,MADoB,CACZC,KAAD,IAAWA,KAAK,CAACC,OAAN,KAAkB,CADhB,EAEpBC,GAFoB,CAEfC,KAAD,IAAW;AACd,aAAO;AAAEC,QAAAA,KAAK,EAAED,KAAK,CAACE,YAAf;AAA6BC,QAAAA,EAAE,EAAEH,KAAK,CAACG;AAAvC,OAAP;AACD,KAJoB,CAAvB,CANyB,CAYzB;AAEA;AACA;AACA;AACA;AACA;;AAEAb,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,OAAO,EAAEV;AAFF,KAAD,CAAR;AAID,GAxBD;AAyBD,CA1BM,C,CA4BP;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["export const getThumbNails = () => {\n  return async (dispatch) => {\n    const response = await fetch(\n      \"https://jsonplaceholder.typicode.com/photos/\"\n    );\n    const data = await response.json();\n\n    const albumArr = await data\n      .filter((album) => album.albumId === 1)\n      .map((photo) => {\n        return { image: photo.thumbnailUrl, id: photo.id };\n      });\n\n    //   this filters out the albumId of 1, maps over them and sets the state to an array of the thumbnailUrl and id\n\n    //   const albumArr = await data\n    //     .filter((album) => album.albumId === 1)\n    //     .map((photo) => {\n    //       return { image: photo.thumbnailUrl, id: photo.id };\n    //     });\n\n    dispatch({\n      type: \"FETCH_THUMBNAILS\",\n      payload: albumArr,\n    });\n  };\n};\n\n// rewrite this code to an action creator that sends out a payload that is exact to images\n// the StoreGrid component will recieve the payload then do the rendering\n// rewrite the fetch as an async/await function\n\n// const [images, setImage] = useState([]);\n\n// useEffect(() => {\n//   fetch(\"https://jsonplaceholder.typicode.com/photos/\")\n//     .then((response) => response.json())\n//     .then((data) => {\n// this filters out the albumId of 1, maps over them and sets the state to an array of the thumbnailUrl and id\n\n//       const albumArr = data\n//         .filter((album) => album.albumId === 1)\n//         .map((photo) => {\n//           return { image: photo.thumbnailUrl, id: photo.id };\n//         });\n\n//       setImage(albumArr);\n//     });\n// }, []);\n\n// const renderImages = () => {\n//   return images.map((photo) => {\n//     return <img src={photo.image} alt='' />;\n//   });\n// };\n"]},"metadata":{},"sourceType":"module"}