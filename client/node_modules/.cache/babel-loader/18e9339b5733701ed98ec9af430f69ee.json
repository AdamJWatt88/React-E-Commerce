{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/SlideMenu.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { getCategory } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/slideMenu.css\";\n\nconst SlideMenu = ({\n  openOrClosed,\n  getCategory,\n  handleSubmit\n}) => {\n  _s();\n\n  useEffect(() => {// console.log(props);\n    // eslint-disable-next-line\n  }, []);\n  const productCategories = [{\n    category: \"menClothing\",\n    value: \"men clothing\"\n  }, {\n    category: \"womenClothing\",\n    value: \"women clothing\"\n  }, {\n    category: \"jewelery\",\n    value: \"jewelery\"\n  }, {\n    category: \"electronics\",\n    value: \"electronics\"\n  }];\n\n  const renderInput = () => {\n    return productCategories.map((category, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-check\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: category.category,\n          component: \"input\",\n          className: \"form-check-input\",\n          type: \"checkbox\",\n          format: v => v === `${category.value}` // converts redux state string to boolean\n          ,\n          normalize: v => v ? `${category.value}` : \"0\" // converts checkbox boolean to string\n          // value={category.category}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-check-label\",\n          htmlFor: \"flexCheckDefault\",\n          children: category.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this);\n    });\n  }; // this submit handler receives props from the Field element that passes props to the form element\n\n\n  const submitHandler = formProps => {\n    //maybe need to check if null then dont console log. if there is a value then console log.\n    //how can formProps be looped over to check if the value of a prop is \"1\" or true and extract that data?\n    if (formProps.electronics === \"electronics\") {\n      console.log(\"electronics has been clicked\");\n    } else {// console.log(formProps);\n    }\n\n    console.log(formProps);\n  };\n\n  const toggleMenu = () => {\n    if (!openOrClosed) {\n      return \"slide-menu\";\n    } else {\n      return \"slide-menu open\";\n    }\n  };\n\n  const toggle = toggleMenu();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${toggle} container`,\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Filter By Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(submitHandler),\n      children: [renderInput(), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Apply Filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SlideMenu, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SlideMenu;\n\nconst mapStateToProps = state => {\n  return {\n    openOrClosed: state.openOrClosed\n  };\n}; // this validate function is only boilerplate. the title and description values need to be changed to the name props of the checkboxes. make sure that atleast one checkbox is checked off before a user hits the submit button.\n\n\nconst validate = formProps => {\n  const errors = {};\n\n  if (!formProps.Electronics) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formProps.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst slideMenu = connect(mapStateToProps, {\n  getCategory\n})(SlideMenu);\nexport default reduxForm({\n  form: \"slideMenu\",\n  validate: validate\n})(slideMenu);\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideMenu\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/SlideMenu.js"],"names":["React","useEffect","connect","Field","reduxForm","getCategory","css","SlideMenu","openOrClosed","handleSubmit","productCategories","category","value","renderInput","map","index","v","submitHandler","formProps","electronics","console","log","toggleMenu","toggle","mapStateToProps","state","validate","errors","Electronics","title","description","slideMenu","form"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { getCategory } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/slideMenu.css\";\n\nconst SlideMenu = ({ openOrClosed, getCategory, handleSubmit }) => {\n  useEffect(() => {\n    // console.log(props);\n    // eslint-disable-next-line\n  }, []);\n\n  const productCategories = [\n    {\n      category: \"menClothing\",\n      value: \"men clothing\",\n    },\n    {\n      category: \"womenClothing\",\n      value: \"women clothing\",\n    },\n    {\n      category: \"jewelery\",\n      value: \"jewelery\",\n    },\n    {\n      category: \"electronics\",\n      value: \"electronics\",\n    },\n  ];\n\n  const renderInput = () => {\n    return productCategories.map((category, index) => {\n      return (\n        <div className='form-check' key={index}>\n          <Field\n            name={category.category}\n            component='input'\n            className='form-check-input'\n            type='checkbox'\n            format={(v) => v === `${category.value}`}\n            // converts redux state string to boolean\n            normalize={(v) => (v ? `${category.value}` : \"0\")}\n            // converts checkbox boolean to string\n            // value={category.category}\n          />\n          <label className='form-check-label' htmlFor='flexCheckDefault'>\n            {category.value}\n          </label>\n        </div>\n      );\n    });\n  };\n\n  // this submit handler receives props from the Field element that passes props to the form element\n  const submitHandler = (formProps) => {\n    //maybe need to check if null then dont console log. if there is a value then console log.\n    //how can formProps be looped over to check if the value of a prop is \"1\" or true and extract that data?\n    if (formProps.electronics === \"electronics\") {\n      console.log(\"electronics has been clicked\");\n    } else {\n      // console.log(formProps);\n    }\n    console.log(formProps);\n  };\n\n  const toggleMenu = () => {\n    if (!openOrClosed) {\n      return \"slide-menu\";\n    } else {\n      return \"slide-menu open\";\n    }\n  };\n\n  const toggle = toggleMenu();\n\n  return (\n    <div className={`${toggle} container`}>\n      <h5>Filter By Category</h5>\n      <form onSubmit={handleSubmit(submitHandler)}>\n        {renderInput()}\n        <button className='btn btn-primary'>Apply Filter</button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    openOrClosed: state.openOrClosed,\n  };\n};\n\n// this validate function is only boilerplate. the title and description values need to be changed to the name props of the checkboxes. make sure that atleast one checkbox is checked off before a user hits the submit button.\nconst validate = (formProps) => {\n  const errors = {};\n\n  if (!formProps.Electronics) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formProps.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst slideMenu = connect(mapStateToProps, {\n  getCategory,\n})(SlideMenu);\n\nexport default reduxForm({\n  form: \"slideMenu\",\n  validate: validate,\n})(slideMenu);\n"]},"metadata":{},"sourceType":"module"}