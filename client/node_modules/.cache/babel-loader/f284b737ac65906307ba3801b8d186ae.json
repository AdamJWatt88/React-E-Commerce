{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProducts } from \"../actions\";\nimport { Link } from \"react-router-dom\"; // eslint-disable-next-line\n\nimport css from \"../css/storeGrid.css\";\n\nconst StoreGrid = ({\n  getProducts,\n  products,\n  categories\n}) => {\n  _s();\n\n  // anytime categories state has been loaded by a user making selections from the checkbox, the getCategory fetch call will be made.\n  useEffect(() => {\n    getProducts(); // eslint-disable-next-line\n  }, []);\n\n  const submitHandler = id => {\n    console.log(\"clicked\");\n\n    /*#__PURE__*/\n    _jsxDEV(Link, {\n      to: `/products/`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this);\n  }; // this function here that will take the products, match them to categories, then render out those sorted products\n\n\n  const sortedProducts = () => {\n    const sortedProducts = products.filter(item => categories.includes(item.category));\n    return sortedProducts.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: submitHandler,\n        className: \"col col-4 product\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.image,\n          alt: item.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"$\", item.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const renderImages = () => {\n    return products.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: submitHandler,\n        className: \"col col-4 product\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.image,\n          alt: item.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"$\", item.price]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: categories.length === 0 ? renderImages() : sortedProducts()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StoreGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = StoreGrid;\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    categories: state.categories\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getProducts\n})(StoreGrid);\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreGrid\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/StoreGrid.js"],"names":["React","useEffect","connect","getProducts","Link","css","StoreGrid","products","categories","submitHandler","id","console","log","sortedProducts","filter","item","includes","category","map","image","title","price","renderImages","length","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEH,EAAAA,WAAF;AAAeI,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAA2C;AAAA;;AAC3D;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,WAAW,GADG,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMM,aAAa,GAAIC,EAAD,IAAQ;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA;AAAA,YAAC,IAAD;AAAM,MAAA,EAAE,EAAG;AAAX;AAAA;AAAA;AAAA;AAAA;AACD,GAHD,CAR2D,CAa3D;;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMA,cAAc,GAAGN,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IACrCP,UAAU,CAACQ,QAAX,CAAoBD,IAAI,CAACE,QAAzB,CADqB,CAAvB;AAGA,WAAOJ,cAAc,CAACK,GAAf,CAAoBH,IAAD,IAAU;AAClC,0BACE;AACE,QAAA,OAAO,EAAEN,aADX;AAEE,QAAA,SAAS,EAAC,mBAFZ;AAAA,gCAIE;AAAK,UAAA,GAAG,EAAEM,IAAI,CAACI,KAAf;AAAsB,UAAA,GAAG,EAAEJ,IAAI,CAACI;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,oBAAKJ,IAAI,CAACK;AAAV;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA,0BAAML,IAAI,CAACM,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA,SAGON,IAAI,CAACL,EAHZ;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAXM,CAAP;AAYD,GAhBD;;AAkBA,QAAMY,YAAY,GAAG,MAAM;AACzB,WAAOf,QAAQ,CAACW,GAAT,CAAcH,IAAD,IAAU;AAC5B,0BACE;AACE,QAAA,OAAO,EAAEN,aADX;AAEE,QAAA,SAAS,EAAC,mBAFZ;AAAA,gCAIE;AAAK,UAAA,GAAG,EAAEM,IAAI,CAACI,KAAf;AAAsB,UAAA,GAAG,EAAEJ,IAAI,CAACI;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,oBAAKJ,IAAI,CAACK;AAAV;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA,0BAAML,IAAI,CAACM,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA,SAGON,IAAI,CAACL,EAHZ;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAXM,CAAP;AAYD,GAbD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACGF,UAAU,CAACe,MAAX,KAAsB,CAAtB,GAA0BD,YAAY,EAAtC,GAA2CT,cAAc;AAD5D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAtDD;;GAAMP,S;;KAAAA,S;;AAwDN,MAAMkB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLlB,IAAAA,QAAQ,EAAEkB,KAAK,CAAClB,QADX;AAELC,IAAAA,UAAU,EAAEiB,KAAK,CAACjB;AAFb,GAAP;AAID,CALD;;AAOA,eAAeN,OAAO,CAACsB,eAAD,EAAkB;AACtCrB,EAAAA;AADsC,CAAlB,CAAP,CAEZG,SAFY,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getProducts } from \"../actions\";\nimport { Link } from \"react-router-dom\";\n// eslint-disable-next-line\nimport css from \"../css/storeGrid.css\";\n\nconst StoreGrid = ({ getProducts, products, categories }) => {\n  // anytime categories state has been loaded by a user making selections from the checkbox, the getCategory fetch call will be made.\n  useEffect(() => {\n    getProducts();\n\n    // eslint-disable-next-line\n  }, []);\n\n  const submitHandler = (id) => {\n    console.log(\"clicked\");\n    <Link to={`/products/`} />;\n  };\n\n  // this function here that will take the products, match them to categories, then render out those sorted products\n  const sortedProducts = () => {\n    const sortedProducts = products.filter((item) =>\n      categories.includes(item.category)\n    );\n    return sortedProducts.map((item) => {\n      return (\n        <div\n          onClick={submitHandler}\n          className='col col-4 product'\n          key={item.id}>\n          <img src={item.image} alt={item.image} />\n          <h6>{item.title}</h6>\n          <h5>${item.price}</h5>\n        </div>\n      );\n    });\n  };\n\n  const renderImages = () => {\n    return products.map((item) => {\n      return (\n        <div\n          onClick={submitHandler}\n          className='col col-4 product'\n          key={item.id}>\n          <img src={item.image} alt={item.image} />\n          <h6>{item.title}</h6>\n          <h5>${item.price}</h5>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        {categories.length === 0 ? renderImages() : sortedProducts()}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    products: state.products,\n    categories: state.categories,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getProducts,\n})(StoreGrid);\n"]},"metadata":{},"sourceType":"module"}