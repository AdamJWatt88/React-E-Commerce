{"ast":null,"code":"import { FETCH_PRODUCTS, FETCH_CATEGORY, SET_SLIDE_MENU, CATEGORY_SELECTIONS } from \"../types\"; //get all products\n\nexport const getProducts = categories => {\n  return async dispatch => {\n    const response = await fetch(\"https://fakestoreapi.com/products\");\n    const data = await response.json();\n    const products = data.filter(item => item.category === categories);\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: products\n    });\n  };\n}; // fetch products by category\n\nexport const getCategory = category => {\n  return async dispatch => {\n    const response = await fetch(`https://fakestoreapi.com/products/category/${category}`);\n    const data = await response.json();\n    dispatch({\n      type: FETCH_CATEGORY,\n      payload: data\n    });\n  };\n}; //map over the formProps obejct being passed in here then assign each category to the payload value\n\nexport const categorySelection = formProps => {\n  //? this might be the solution. This takes all the values from the formProps object and puts them into an array. that array can be mapped over and each entry then fed into the getCategory action creator. the getCategory action creator needs to call each time and create a new array of the combined products for the storeGrid component to load out.\n  // only add formProps value to the array if not null. if a value is null then remove it\n  const formValues = Object.values(formProps).filter(item => item !== null);\n  return {\n    type: CATEGORY_SELECTIONS,\n    payload: formValues\n  };\n}; //open and close the slideMenu if true or false\n\nexport const showSlideMenu = () => {\n  return {\n    type: SET_SLIDE_MENU\n  };\n};","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/actions/index.js"],"names":["FETCH_PRODUCTS","FETCH_CATEGORY","SET_SLIDE_MENU","CATEGORY_SELECTIONS","getProducts","categories","dispatch","response","fetch","data","json","products","filter","item","category","type","payload","getCategory","categorySelection","formProps","formValues","Object","values","showSlideMenu"],"mappings":"AAAA,SACEA,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,mBAJF,QAKO,UALP,C,CAOA;;AACA,OAAO,MAAMC,WAAW,GAAIC,UAAD,IAAgB;AACzC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkBT,UAAxC,CAAjB;AAEAC,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEf,cADC;AAEPgB,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAID,GAVD;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMM,WAAW,GAAIH,QAAD,IAAc;AACvC,SAAO,MAAOR,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,8CAA6CM,QAAS,EAD7B,CAA5B;AAGA,UAAML,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPS,MAAAA,IAAI,EAAEd,cADC;AAEPe,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAID,GAVD;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMS,iBAAiB,GAAIC,SAAD,IAAe;AAC9C;AAEA;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyBP,MAAzB,CAAiCC,IAAD,IAAUA,IAAI,KAAK,IAAnD,CAAnB;AAEA,SAAO;AACLE,IAAAA,IAAI,EAAEZ,mBADD;AAELa,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID,CAVM,C,CAYP;;AACA,OAAO,MAAMG,aAAa,GAAG,MAAM;AACjC,SAAO;AACLR,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  FETCH_PRODUCTS,\n  FETCH_CATEGORY,\n  SET_SLIDE_MENU,\n  CATEGORY_SELECTIONS,\n} from \"../types\";\n\n//get all products\nexport const getProducts = (categories) => {\n  return async (dispatch) => {\n    const response = await fetch(\"https://fakestoreapi.com/products\");\n    const data = await response.json();\n\n    const products = data.filter((item) => item.category === categories);\n\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: products,\n    });\n  };\n};\n\n// fetch products by category\nexport const getCategory = (category) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      `https://fakestoreapi.com/products/category/${category}`\n    );\n    const data = await response.json();\n\n    dispatch({\n      type: FETCH_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n//map over the formProps obejct being passed in here then assign each category to the payload value\nexport const categorySelection = (formProps) => {\n  //? this might be the solution. This takes all the values from the formProps object and puts them into an array. that array can be mapped over and each entry then fed into the getCategory action creator. the getCategory action creator needs to call each time and create a new array of the combined products for the storeGrid component to load out.\n\n  // only add formProps value to the array if not null. if a value is null then remove it\n  const formValues = Object.values(formProps).filter((item) => item !== null);\n\n  return {\n    type: CATEGORY_SELECTIONS,\n    payload: formValues,\n  };\n};\n\n//open and close the slideMenu if true or false\nexport const showSlideMenu = () => {\n  return {\n    type: SET_SLIDE_MENU,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}