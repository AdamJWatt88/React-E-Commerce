{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js\";\nimport React, { createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart, updateQuantity } from \"../actions\"; // eslint-disable-next-line\n\nimport css from \"../css/shoppingCartCard.css\";\n\nconst ShoppingCartCard = ({\n  cartItems,\n  removeProductFromCart,\n  updateQuantity\n}) => {\n  // this creates an array of all the refs and stores them to an array for each item in cartItems\n  const refs = Array.from(cartItems, () => /*#__PURE__*/createRef(null)); // this handler loops through the refs and checks that they match the delete button's data-key and removes the item from the dom and cartItems\n\n  const deleteFromCart = e => {\n    refs.forEach(ref => {\n      if (ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        removeProductFromCart(ref.current.getAttribute(\"value\"));\n      }\n    });\n  }; //! needs to update quantity after a user gives some input\n\n\n  const updateCart = e => {\n    refs.forEach(ref => {\n      if (ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")) {\n        updateQuantity({\n          id: +ref.current.getAttribute(\"value\"),\n          quantity: 9\n        });\n      }\n    });\n  };\n\n  const renderItems = () => {\n    return cartItems.map((cartItem, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: refs[i],\n        value: cartItem.id,\n        className: \"cart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: cartItem.image,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: cartItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", cartItem.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Quantity: \", cartItem.quantity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: updateCart,\n              \"data-key\": cartItem.id,\n              className: \"btn btn-primary\",\n              children: \"Update Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: deleteFromCart,\n              \"data-key\": cartItem.id,\n              className: \"btn btn-danger\",\n              children: \"Delete From Cart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, cartItem.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: renderItems()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n\n_c = ShoppingCartCard;\n\nconst mapStateToProps = state => {\n  return {\n    cartItems: state.cartItems\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeProductFromCart,\n  updateQuantity\n})(ShoppingCartCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShoppingCartCard\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/ShoppingCartCard.js"],"names":["React","createRef","connect","removeProductFromCart","updateQuantity","css","ShoppingCartCard","cartItems","refs","Array","from","deleteFromCart","e","forEach","ref","current","getAttribute","target","updateCart","id","quantity","renderItems","map","cartItem","i","image","title","price","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeProductFromCart, updateQuantity } from \"../actions\";\n\n// eslint-disable-next-line\nimport css from \"../css/shoppingCartCard.css\";\n\nconst ShoppingCartCard = ({\n  cartItems,\n  removeProductFromCart,\n  updateQuantity,\n}) => {\n  // this creates an array of all the refs and stores them to an array for each item in cartItems\n  const refs = Array.from(cartItems, () => createRef(null));\n\n  // this handler loops through the refs and checks that they match the delete button's data-key and removes the item from the dom and cartItems\n  const deleteFromCart = (e) => {\n    refs.forEach((ref) => {\n      if (\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        removeProductFromCart(ref.current.getAttribute(\"value\"));\n      }\n    });\n  };\n\n  //! needs to update quantity after a user gives some input\n  const updateCart = (e) => {\n    refs.forEach((ref) => {\n      if (\n        ref.current.getAttribute(\"value\") === e.target.getAttribute(\"data-key\")\n      ) {\n        updateQuantity({ id: +ref.current.getAttribute(\"value\"), quantity: 9 });\n      }\n    });\n  };\n\n  const renderItems = () => {\n    return cartItems.map((cartItem, i) => {\n      return (\n        <div\n          ref={refs[i]}\n          key={cartItem.id}\n          value={cartItem.id}\n          className='cart-card'>\n          <div className='cart-card-img'>\n            <img src={cartItem.image} alt='' />\n          </div>\n          <div className='cart-card-body'>\n            <h5>{cartItem.title}</h5>\n            <p>${cartItem.price}</p>\n            <p>Quantity: {cartItem.quantity}</p>\n            <div className='button-group'>\n              <button\n                onClick={updateCart}\n                data-key={cartItem.id}\n                className='btn btn-primary'>\n                Update Quantity\n              </button>\n              <button\n                onClick={deleteFromCart}\n                data-key={cartItem.id}\n                className='btn btn-danger'>\n                Delete From Cart\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return <div className='container'>{renderItems()}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cartItems: state.cartItems,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeProductFromCart,\n  updateQuantity,\n})(ShoppingCartCard);\n"]},"metadata":{},"sourceType":"module"}