{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/CostTotal.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst CostTotal = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n};\n\n_c = CostTotal;\nexport default CostTotal; //* all of this code here works to round add the total together then round to the nearest hundereth. Needs to be reworked to map over the cartItems state.\n\nconst products = [{\n  id: 1,\n  price: 12.99,\n  quantity: 3\n}, {\n  id: 2,\n  price: 9.99,\n  quantity: 4\n}, {\n  id: 3,\n  price: 5.99,\n  quantity: 5\n}];\nconst priceOfItems = [];\nproducts.forEach(item => {\n  const totalEach = item.price * item.quantity;\n  priceOfItems.push(totalEach);\n});\n\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\nconst totalOfCart = priceOfItems.reduce(reducer);\n/**\n * Decimal adjustment of a number.\n *\n * @param {String}  type  The type of adjustment.\n * @param {Number}  value The number.\n * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n * @returns {Number} The adjusted value.\n */\n\nfunction decimalAdjust(type, value, exp) {\n  // If the exp is undefined or zero...\n  if (typeof exp === \"undefined\" || +exp === 0) {\n    return Math[type](value);\n  }\n\n  value = +value;\n  exp = +exp; // If the value is not a number or the exp is not an integer...\n\n  if (isNaN(value) || !(typeof exp === \"number\" && exp % 1 === 0)) {\n    return NaN;\n  } // Shift\n\n\n  value = value.toString().split(\"e\");\n  value = Math[type](+(value[0] + \"e\" + (value[1] ? +value[1] - exp : -exp))); // Shift back\n\n  value = value.toString().split(\"e\");\n  return +(value[0] + \"e\" + (value[1] ? +value[1] + exp : exp));\n} // Decimal round\n\n\nconst round10 = (value, exp) => decimalAdjust(\"round\", value, exp);\n\nconsole.log(\"round\", round10(totalOfCart, -2)); // Decimal floor\n\nconst floor10 = (value, exp) => decimalAdjust(\"floor\", value, exp);\n\nconsole.log(\"floor\", floor10(totalOfCart, -2)); // Decimal ceil\n\nconst ceil10 = (value, exp) => decimalAdjust(\"ceil\", value, exp);\n\nconsole.log(\"ceil\", ceil10(totalOfCart, -2));\n\nvar _c;\n\n$RefreshReg$(_c, \"CostTotal\");","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/components/CostTotal.js"],"names":["React","connect","CostTotal","products","id","price","quantity","priceOfItems","forEach","item","totalEach","push","reducer","accumulator","currentValue","totalOfCart","reduce","decimalAdjust","type","value","exp","Math","isNaN","NaN","toString","split","round10","console","log","floor10","ceil10"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst CostTotal = () => {\n  return <div></div>;\n};\n\nexport default CostTotal;\n\n//* all of this code here works to round add the total together then round to the nearest hundereth. Needs to be reworked to map over the cartItems state.\nconst products = [\n  { id: 1, price: 12.99, quantity: 3 },\n  { id: 2, price: 9.99, quantity: 4 },\n  { id: 3, price: 5.99, quantity: 5 },\n];\n\nconst priceOfItems = [];\n\nproducts.forEach((item) => {\n  const totalEach = item.price * item.quantity;\n  priceOfItems.push(totalEach);\n});\n\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\nconst totalOfCart = priceOfItems.reduce(reducer);\n\n/**\n * Decimal adjustment of a number.\n *\n * @param {String}  type  The type of adjustment.\n * @param {Number}  value The number.\n * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n * @returns {Number} The adjusted value.\n */\nfunction decimalAdjust(type, value, exp) {\n  // If the exp is undefined or zero...\n  if (typeof exp === \"undefined\" || +exp === 0) {\n    return Math[type](value);\n  }\n  value = +value;\n  exp = +exp;\n  // If the value is not a number or the exp is not an integer...\n  if (isNaN(value) || !(typeof exp === \"number\" && exp % 1 === 0)) {\n    return NaN;\n  }\n  // Shift\n  value = value.toString().split(\"e\");\n  value = Math[type](+(value[0] + \"e\" + (value[1] ? +value[1] - exp : -exp)));\n  // Shift back\n  value = value.toString().split(\"e\");\n  return +(value[0] + \"e\" + (value[1] ? +value[1] + exp : exp));\n}\n\n// Decimal round\nconst round10 = (value, exp) => decimalAdjust(\"round\", value, exp);\nconsole.log(\"round\", round10(totalOfCart, -2));\n// Decimal floor\nconst floor10 = (value, exp) => decimalAdjust(\"floor\", value, exp);\nconsole.log(\"floor\", floor10(totalOfCart, -2));\n// Decimal ceil\nconst ceil10 = (value, exp) => decimalAdjust(\"ceil\", value, exp);\nconsole.log(\"ceil\", ceil10(totalOfCart, -2));\n"]},"metadata":{},"sourceType":"module"}