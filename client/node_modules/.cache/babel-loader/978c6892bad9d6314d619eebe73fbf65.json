{"ast":null,"code":"import { FETCH_SINGLE_PRODUCT, FETCH_PRODUCTS, FETCH_CATEGORY, SET_SLIDE_MENU, CATEGORY_SELECTIONS, CLEAR_PRODUCT, ADD_CART_ITEM, REMOVE_CART_ITEM, CART_ITEM_CHECK } from \"../types\"; //open and close the slideMenu if true or false\n\nexport const showSlideMenu = () => {\n  return {\n    type: SET_SLIDE_MENU\n  };\n}; //get all products\n\nexport const getProducts = categories => {\n  return async dispatch => {\n    const response = await fetch(\"https://fakestoreapi.com/products\");\n    const data = await response.json();\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: data\n    });\n    dispatch({\n      type: CLEAR_PRODUCT\n    });\n  };\n}; // fetch products by category\n\nexport const getCategory = category => {\n  return async dispatch => {\n    const response = await fetch(`https://fakestoreapi.com/products/category/${category}`);\n    const data = await response.json();\n    dispatch({\n      type: FETCH_CATEGORY,\n      payload: data\n    });\n  };\n}; // fetch a single product by its id\n\nexport const getSingleProduct = id => {\n  return async dispatch => {\n    const response = await fetch(`https://fakestoreapi.com/products/${id}`);\n    const data = await response.json();\n    dispatch({\n      type: FETCH_SINGLE_PRODUCT,\n      payload: data\n    });\n  };\n}; //map over the formProps obejct being passed in here and take every category value then assign an array made of those values to payload value\n\nexport const categorySelection = formProps => {\n  // only add formProps value to the array if not null. if a value is null then remove it\n  const formValues = Object.values(formProps).filter(item => item !== null);\n  return {\n    type: CATEGORY_SELECTIONS,\n    payload: formValues\n  };\n}; //adds a product to the cartItems state\n\nexport const addProductToCart = cartItem => {\n  return {\n    type: ADD_CART_ITEM,\n    payload: cartItem\n  };\n}; //remove a product from the cartItems state\n\nexport const removeProductFromCart = cartItem => {\n  console.log(cartItem);\n  return {\n    type: REMOVE_CART_ITEM,\n    payload: cartItem\n  };\n}; //checks if an item is already inside the cartItems state by matching the id\n\nexport const isItemInCart = () => {\n  return {\n    type: CART_ITEM_CHECK\n  };\n};","map":{"version":3,"sources":["/Users/adamwatt/Desktop/JavaScriptProjects/React-practice/e-commerce/src/actions/index.js"],"names":["FETCH_SINGLE_PRODUCT","FETCH_PRODUCTS","FETCH_CATEGORY","SET_SLIDE_MENU","CATEGORY_SELECTIONS","CLEAR_PRODUCT","ADD_CART_ITEM","REMOVE_CART_ITEM","CART_ITEM_CHECK","showSlideMenu","type","getProducts","categories","dispatch","response","fetch","data","json","payload","getCategory","category","getSingleProduct","id","categorySelection","formProps","formValues","Object","values","filter","item","addProductToCart","cartItem","removeProductFromCart","console","log","isItemInCart"],"mappings":"AAAA,SACEA,oBADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,mBALF,EAMEC,aANF,EAOEC,aAPF,EAQEC,gBARF,EASEC,eATF,QAUO,UAVP,C,CAYA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMQ,WAAW,GAAIC,UAAD,IAAgB;AACzC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAET,cADC;AAEPiB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIAH,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAGD,GAXD;AAYD,CAbM,C,CAeP;;AACA,OAAO,MAAMc,WAAW,GAAIC,QAAD,IAAc;AACvC,SAAO,MAAOP,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,8CAA6CK,QAAS,EAD7B,CAA5B;AAGA,UAAMJ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAER,cADC;AAEPgB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAVD;AAWD,CAZM,C,CAcP;;AACA,OAAO,MAAMK,gBAAgB,GAAIC,EAAD,IAAQ;AACtC,SAAO,MAAOT,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCO,EAAG,EAAzC,CAA5B;AACA,UAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPH,MAAAA,IAAI,EAAEV,oBADC;AAEPkB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GARD;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMO,iBAAiB,GAAIC,SAAD,IAAe;AAC9C;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,SAAd,EAAyBI,MAAzB,CAAiCC,IAAD,IAAUA,IAAI,KAAK,IAAnD,CAAnB;AAEA,SAAO;AACLnB,IAAAA,IAAI,EAAEN,mBADD;AAELc,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CARM,C,CAUP;;AACA,OAAO,MAAMK,gBAAgB,GAAIC,QAAD,IAAc;AAC5C,SAAO;AACLrB,IAAAA,IAAI,EAAEJ,aADD;AAELY,IAAAA,OAAO,EAAEa;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMC,qBAAqB,GAAID,QAAD,IAAc;AACjDE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,SAAO;AACLrB,IAAAA,IAAI,EAAEH,gBADD;AAELW,IAAAA,OAAO,EAAEa;AAFJ,GAAP;AAID,CANM,C,CAQP;;AACA,OAAO,MAAMI,YAAY,GAAG,MAAM;AAChC,SAAO;AACLzB,IAAAA,IAAI,EAAEF;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  FETCH_SINGLE_PRODUCT,\n  FETCH_PRODUCTS,\n  FETCH_CATEGORY,\n  SET_SLIDE_MENU,\n  CATEGORY_SELECTIONS,\n  CLEAR_PRODUCT,\n  ADD_CART_ITEM,\n  REMOVE_CART_ITEM,\n  CART_ITEM_CHECK,\n} from \"../types\";\n\n//open and close the slideMenu if true or false\nexport const showSlideMenu = () => {\n  return {\n    type: SET_SLIDE_MENU,\n  };\n};\n\n//get all products\nexport const getProducts = (categories) => {\n  return async (dispatch) => {\n    const response = await fetch(\"https://fakestoreapi.com/products\");\n    const data = await response.json();\n\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: data,\n    });\n    dispatch({\n      type: CLEAR_PRODUCT,\n    });\n  };\n};\n\n// fetch products by category\nexport const getCategory = (category) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      `https://fakestoreapi.com/products/category/${category}`\n    );\n    const data = await response.json();\n\n    dispatch({\n      type: FETCH_CATEGORY,\n      payload: data,\n    });\n  };\n};\n\n// fetch a single product by its id\nexport const getSingleProduct = (id) => {\n  return async (dispatch) => {\n    const response = await fetch(`https://fakestoreapi.com/products/${id}`);\n    const data = await response.json();\n\n    dispatch({\n      type: FETCH_SINGLE_PRODUCT,\n      payload: data,\n    });\n  };\n};\n\n//map over the formProps obejct being passed in here and take every category value then assign an array made of those values to payload value\nexport const categorySelection = (formProps) => {\n  // only add formProps value to the array if not null. if a value is null then remove it\n  const formValues = Object.values(formProps).filter((item) => item !== null);\n\n  return {\n    type: CATEGORY_SELECTIONS,\n    payload: formValues,\n  };\n};\n\n//adds a product to the cartItems state\nexport const addProductToCart = (cartItem) => {\n  return {\n    type: ADD_CART_ITEM,\n    payload: cartItem,\n  };\n};\n\n//remove a product from the cartItems state\nexport const removeProductFromCart = (cartItem) => {\n  console.log(cartItem);\n  return {\n    type: REMOVE_CART_ITEM,\n    payload: cartItem,\n  };\n};\n\n//checks if an item is already inside the cartItems state by matching the id\nexport const isItemInCart = () => {\n  return {\n    type: CART_ITEM_CHECK,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}